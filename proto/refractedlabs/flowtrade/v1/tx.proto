syntax = "proto3";

package refractedlabs.flowtrade.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "refractedlabs/flowtrade/v1/flow.proto";
import "refractedlabs/flowtrade/v1/params.proto";
import "refractedlabs/flowtrade/v1/position.proto";

option go_package = "github.com/refractedlabs/flowtrade/x/flowtrade/types/v1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateFlow(MsgCreateFlow) returns (MsgCreateFlowResponse);
  rpc JoinFlow(MsgJoinFlow) returns (MsgJoinFlowResponse);
  rpc ExitFlow(MsgExitFlow) returns (MsgExitFlowResponse);
  rpc SetOperator(MsgSetOperator) returns (MsgSetOperatorResponse);
  rpc ClaimTokenIn(MsgClaimTokenIn) returns (MsgClaimTokenInResponse);
  rpc ClaimTokenOut(MsgClaimTokenOut) returns (MsgClaimTokenOutResponse);
  rpc StopFlow(MsgStopFlow) returns (MsgStopFlowResponse);
}
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "refracted/flowtrade/v1/UpdateParams";

  string authority = 1;
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgUpdateParamsResponse {}

message MsgCreateFlow {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "refracted/flowtrade/v1/CreateFlow";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  FlowCreationRequest request = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgCreateFlowResponse {
  Flow flow = 1 [(gogoproto.nullable) = false];
}

message MsgJoinFlow {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "refracted/flowtrade/v1/JoinFlow";

  uint64 flow = 1 [(amino.dont_omitempty) = true];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string signer = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgJoinFlowResponse {
  Position position = 1 [(gogoproto.nullable) = false];
}

message MsgExitFlow {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "refracted/flowtrade/v1/ExitFlow";

  uint64 flow = 1 [(amino.dont_omitempty) = true];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string signer = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgExitFlowResponse {
  Position position = 1 [(gogoproto.nullable) = false];
}

message MsgSetOperator {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "refracted/flowtrade/v1/SetOperator";

  uint64 flow = 1 [(amino.dont_omitempty) = true];
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string operator = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgSetOperatorResponse {}

message MsgClaimTokenIn {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "refracted/flowtrade/v1/ClaimTokenIn";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 flow = 2 [(amino.dont_omitempty) = true];
  string treasury_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClaimTokenInResponse {
  cosmos.base.v1beta1.Coin claimed = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 2 [(gogoproto.nullable) = false];
}

message MsgClaimTokenOut {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "refracted/flowtrade/v1/ClaimTokenOut";

  uint64 flow = 1 [(amino.dont_omitempty) = true];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string signer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClaimTokenOutResponse {
  cosmos.base.v1beta1.Coin claimed = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin fee = 2 [(gogoproto.nullable) = false];
}

message MsgStopFlow {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "refracted/flowtrade/v1/StopFlow";

  uint64 flow_id = 1 [(amino.dont_omitempty) = true];
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgStopFlowResponse {}
